import React, { useEffect, useMemo, useRef, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  LogIn,
  UserPlus,
  ShieldCheck,
  Mail,
  Lock,
  Loader2,
  Eye,
  EyeOff,
  Gamepad2,
  LogOut,
  CheckCircle2,
  Send,
  ChevronRight,
  UserCircle2,
  AlertCircle,
} from "lucide-react";
import { initializeApp, getApps } from "firebase/app";
import {
  getAuth,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  GoogleAuthProvider,
  signInWithPopup,
  onAuthStateChanged,
  signOut,
  sendEmailVerification,
  applyActionCode,
  checkActionCode,
} from "firebase/auth";
import {
  getFirestore,
  doc,
  setDoc,
  getDoc,
  updateDoc,
  serverTimestamp,
  deleteDoc,
  Timestamp,
} from "firebase/firestore";
import {
  LineChart,
  Line,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
} from "recharts";

/*********************
 * Firebase Setup (robust lazy getters)
 *********************/
const firebaseConfig = {
  apiKey: "AIzaSyB_wZLaU6LqFCei5BPUEfUKHVjajqKIZ7E",
  authDomain: "br-online-a1333.firebaseapp.com",
  projectId: "br-online-a1333",
  storageBucket: "br-online-a1333.firebasestorage.app",
  messagingSenderId: "1094850593793",
  appId: "1:1094850593793:web:2dfb4bf4c09db2f93d2c00",
  measurementId: "G-WKJF9PZ67V",
};

// Initialize global references safely
if (typeof globalThis !== 'undefined') {
  globalThis.__BR_ONLINE_FIREBASE_APP = globalThis.__BR_ONLINE_FIREBASE_APP || null;
  globalThis.__BR_ONLINE_AUTH = globalThis.__BR_ONLINE_AUTH || null;
  globalThis.__BR_ONLINE_DB = globalThis.__BR_ONLINE_DB || null;
}

function getFirebaseApp() {
  if (globalThis.__BR_ONLINE_FIREBASE_APP) return globalThis.__BR_ONLINE_FIREBASE_APP;
  try {
    const app = getApps().length ? getApps()[0] : initializeApp(firebaseConfig);
    globalThis.__BR_ONLINE_FIREBASE_APP = app;
    return app;
  } catch (e) {
    try {
      const fallbackName = `br-online-fallback-${Date.now()}`;
      const app = initializeApp(firebaseConfig, fallbackName);
      globalThis.__BR_ONLINE_FIREBASE_APP = app;
      return app;
    } catch (e2) {
      console.error("Failed to initialize Firebase App (primary + fallback):", e, e2);
      throw e2;
    }
  }
}

function getAuthInstance() {
  if (globalThis.__BR_ONLINE_AUTH) return globalThis.__BR_ONLINE_AUTH;
  try {
    const app = getFirebaseApp();
    const a = getAuth(app);
    globalThis.__BR_ONLINE_AUTH = a;
    return a;
  } catch (e) {
    console.warn("getAuth failed, attempting fallback:", e);
    try {
      const fallbackName = `br-online-auth-fallback-${Date.now()}`;
      const app = initializeApp(firebaseConfig, fallbackName);
      const a = getAuth(app);
      globalThis.__BR_ONLINE_AUTH = a;
      globalThis.__BR_ONLINE_FIREBASE_APP = app;
      return a;
    } catch (e2) {
      console.error("Auth initialization fallback failed:", e2);
      throw e2;
    }
  }
}

function getDbInstance() {
  if (globalThis.__BR_ONLINE_DB) return globalThis.__BR_ONLINE_DB;
  try {
    const app = getFirebaseApp();
    const d = getFirestore(app);
    globalThis.__BR_ONLINE_DB = d;
    return d;
  } catch (e) {
    console.warn("getFirestore failed, attempting fallback:", e);
    try {
      const fallbackName = `br-online-db-fallback-${Date.now()}`;
      const app = initializeApp(firebaseConfig, fallbackName);
      const d = getFirestore(app);
      globalThis.__BR_ONLINE_DB = d;
      globalThis.__BR_ONLINE_FIREBASE_APP = app;
      return d;
    } catch (e2) {
      console.error("Firestore initialization fallback failed:", e2);
      throw e2;
    }
  }
}

/*********************
 * Helpers
 *********************/
const emailRegex = /^(?=.{3,254}$)[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/;
function sanitizeDocId(id) {
  return id ? id.replaceAll('/', '_slash_') : '';
}
function rand6() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

/*********************
 * Minimal toast system
 *********************/
function useToasts() {
  const [toasts, setToasts] = useState([]);
  const add = (msg, type = "info") => {
    const id = Math.random().toString(36).slice(2);
    setToasts((t) => [...t, { id, msg, type }]);
    setTimeout(() => setToasts((t) => t.filter((x) => x.id !== id)), 3500);
  };
  return { toasts, add };
}

function Toasts({ items }) {
  return (
    <div className="fixed z-[100] top-4 right-4 space-y-2 max-w-xs sm:max-w-sm">
      <AnimatePresence>
        {items.map((t) => (
          <motion.div
            key={t.id}
            initial={{ opacity: 0, y: -6 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -6 }}
            transition={{ duration: 0.3 }}
            className={`backdrop-blur-md shadow-xl rounded-xl px-4 py-3 flex items-center gap-3 border ${
              t.type === 'error'
                ? 'bg-red-500/15 border-red-300/30 text-red-50'
                : t.type === 'success'
                ? 'bg-emerald-500/15 border-emerald-300/30 text-emerald-50'
                : 'bg-white/10 border-white/20 text-white'
            }`}
          >
            {t.type === 'error' ? (
              <AlertCircle className="w-5 h-5 opacity-80" />
            ) : (
              <ShieldCheck className="w-5 h-5 opacity-80" />
            )}
            <span className="text-sm font-medium">{t.msg}</span>
          </motion.div>
        ))}
      </AnimatePresence>
    </div>
  );
}

/*********************
 * Ripple Button
 *********************/
function RippleButton({ className = "", children, onClick, disabled, type = "button" }) {
  const ref = useRef(null);
  const [ripples, setRipples] = useState([]);
  
  const addRipple = (e) => {
    if (!ref.current) return;
    const rect = ref.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    const size = Math.max(rect.width, rect.height);
    const id = Math.random().toString(36).slice(2);
    setRipples((r) => [...r, { x, y, size, id }]);
    setTimeout(() => setRipples((r) => r.filter((i) => i.id !== id)), 600);
  };
  
  return (
    <button
      ref={ref}
      type={type}
      disabled={disabled}
      className={`relative overflow-hidden select-none active:scale-[.995] transition-all duration-200 ${
        disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'
      } ${className}`}
      onClick={(e) => {
        addRipple(e);
        onClick && onClick(e);
      }}
    >
      <span className="relative z-10">{children}</span>
      <span className="absolute inset-0 rounded-2xl">
        {ripples.map((r) => (
          <span
            key={r.id}
            className="absolute bg-white/40 rounded-full animate-[ripple_600ms_ease-out]"
            style={{ 
              left: r.x - r.size / 2, 
              top: r.y - r.size / 2, 
              width: r.size, 
              height: r.size 
            }}
          />
        ))}
      </span>
    </button>
  );
}

/*********************
 * OTP Input
 *********************/
function OtpInput({ value, onChange, length = 6, disabled }) {
  const inputs = Array.from({ length });
  const refs = useRef([]);
  
  const setChar = (i, v) => {
    const s = (value || '').split('');
    if (/^\d?$/.test(v)) {
      s[i] = v;
      const next = s.join('').slice(0, length);
      onChange(next);
      if (v && i < length - 1) refs.current[i + 1]?.focus();
    }
  };

  return (
    <div className="flex gap-2 justify-center flex-wrap sm:flex-nowrap">
      {inputs.map((_, i) => (
        <input
          key={i}
          ref={(el) => (refs.current[i] = el)}
          inputMode="numeric"
          maxLength={1}
          disabled={disabled}
          className="w-10 h-12 sm:w-12 sm:h-14 text-center text-lg sm:text-xl font-bold tracking-widest rounded-xl bg-white/5 border border-white/15 focus:border-white/40 outline-none text-white transition-all duration-200"
          value={value?.[i] || ''}
          onChange={(e) => setChar(i, e.target.value.replace(/\D/g, ''))}
          onKeyDown={(e) => {
            if (e.key === 'Backspace' && !value?.[i] && i > 0) refs.current[i - 1]?.focus();
          }}
        />
      ))}
    </div>
  );
}

/*********************
 * Email OTP service
 *********************/
async function sendEmailOtp(email, reason = "вход") {
  const code = rand6();
  const docId = sanitizeDocId(email.toLowerCase());
  const expiresAt = Timestamp.fromDate(new Date(Date.now() + 10 * 60 * 1000));
  
  await setDoc(doc(getDbInstance(), "otps", docId), {
    code,
    email,
    reason,
    expiresAt,
    createdAt: serverTimestamp(),
    attempts: 0,
  });
  
  try {
    const response = await fetch('/api/send-otp', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email,
        code,
        reason,
      }),
    });

    if (!response.ok) {
      throw new Error(`Email API error: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('Email sent successfully:', data);
    return null;
  } catch (e) {
    console.error('Email sending failed:', e);
    return code;
  }
}

async function verifyEmailOtp(email, code) {
  const docId = sanitizeDocId(email.toLowerCase());
  const d = await getDoc(doc(getDbInstance(), "otps", docId));
  
  if (!d.exists()) throw new Error("Код не найден. Запросите новый.");
  
  const data = d.data();
  const now = Timestamp.now();
  
  if (now.toMillis() > data.expiresAt.toMillis()) {
    await deleteDoc(doc(getDbInstance(), "otps", docId));
    throw new Error("Срок действия кода истёк. Запросите новый.");
  }
  
  if (String(code) !== String(data.code)) {
    const attempts = (data.attempts || 0) + 1;
    await updateDoc(doc(getDbInstance(), "otps", docId), { attempts });
    throw new Error("Неверный код.");
  }
  
  await deleteDoc(doc(getDbInstance(), "otps", docId));
}

/*********************
 * Email Verification Handler
 *********************/
async function handleEmailVerification(user) {
  try {
    await sendEmailVerification(user);
    return true;
  } catch (error) {
    console.error('Error sending verification email:', error);
    throw error;
  }
}

async function verifyEmailActionCode(actionCode) {
  try {
    const auth = getAuthInstance();
    await checkActionCode(auth, actionCode);
    await applyActionCode(auth, actionCode);
    return true;
  } catch (error) {
    console.error('Error verifying email:', error);
    throw error;
  }
}

/*********************
 * Reusable Field component - ИСПРАВЛЕННАЯ ВЕРСИЯ
 *********************/
function Field({ label, icon, rightIcon, type = 'text', value, onChange, placeholder, disabled }) {
  const handleChange = (e) => {
    if (onChange) {
      onChange(e.target.value);
    }
  };

  return (
    <label className="block">
      <div className="text-sm text-white/70 mb-1 font-medium">{label}</div>
      <div className="flex items-center gap-3 rounded-2xl bg-white/5 border border-white/10 px-4 py-3 focus-within:border-white/40 transition-all duration-300">
        <span className="text-white/60">{icon}</span>
        <input
          type={type}
          value={value || ''}
          onChange={handleChange}
          placeholder={placeholder}
          disabled={disabled}
          className="flex-1 bg-transparent outline-none text-white placeholder:text-white/40 min-w-0"
          required
        />
        {rightIcon}
      </div>
    </label>
  );
}

/*********************
 * Dashboard mock (server monitoring theme)
 *********************/
const demoSeries = Array.from({ length: 24 }).map((_, i) => ({
  time: `${i}:00`,
  players: Math.round(40 + 30 * Math.sin((i / 24) * Math.PI * 2) + Math.random() * 12),
}));

function StatCard({ title, value, sub }) {
  return (
    <motion.div 
      className="rounded-2xl p-4 sm:p-5 bg-white/5 border border-white/10 backdrop-blur hover:bg-white/7 transition-all duration-300"
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      transition={{ duration: 0.2 }}
    >
      <div className="text-sm text-white/70">{title}</div>
      <div className="mt-2 text-2xl sm:text-3xl font-extrabold text-white">{value}</div>
      {sub && <div className="text-xs text-white/60 mt-1">{sub}</div>}
    </motion.div>
  );
}

/*********************
 * Email Verification Component
 *********************/
function EmailVerificationCard({ email, onResend, onCancel, loading }) {
  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.4, ease: "easeOut" }}
      className="w-full max-w-xl mx-auto px-4 rounded-3xl p-6 sm:p-8 border border-white/10 bg-white/10 backdrop-blur-xl shadow-2xl"
    >
      <motion.div 
        className="flex items-center gap-4 mb-6"
        initial={{ y: -10, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.1, duration: 0.3 }}
      >
        <div className="w-12 h-12 rounded-2xl bg-gradient-to-br from-indigo-500 to-emerald-500 grid place-items-center">
          <Mail className="w-6 h-6 text-white" />
        </div>
        <div>
          <div className="text-white font-black text-xl">Подтверждение email</div>
          <div className="text-white/70 text-sm break-all">
            Отправлено на <span className="font-semibold text-white/90">{email}</span>
          </div>
        </div>
      </motion.div>

      <motion.div
        initial={{ y: 10, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.2, duration: 0.3 }}
        className="space-y-4 text-center"
      >
        <p className="text-white/80 text-sm leading-relaxed">
          Мы отправили письмо с ссылкой для подтверждения на вашу почту. 
          Пожалуйста, перейдите по ссылке в письме чтобы завершить регистрацию.
        </p>
        
        <div className="bg-yellow-500/10 border border-yellow-500/20 rounded-xl p-4">
          <p className="text-yellow-200 text-xs">
            <strong>Важно:</strong> Без подтверждения email вы не сможете получить полный доступ к системе.
          </p>
        </div>

        <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 pt-4">
          <RippleButton
            disabled={loading}
            onClick={onResend}
            className="rounded-2xl bg-gradient-to-r from-indigo-500 to-emerald-500 text-white font-semibold py-3 border border-white/10 hover:shadow-lg transition-all duration-300"
          >
            {loading ? (
              <span className="inline-flex items-center gap-2">
                <Loader2 className="w-5 h-5 animate-spin" /> Отправляем…
              </span>
            ) : (
              <span className="inline-flex items-center gap-2">
                Отправить ещё раз <Send className="w-5 h-5" />
              </span>
            )}
          </RippleButton>
          
          <RippleButton
            disabled={loading}
            onClick={onCancel}
            className="rounded-2xl bg-white/5 hover:bg-white/10 text-white font-semibold py-3 border border-white/10 transition-all duration-300"
          >
            <span className="text-sm">Выйти</span>
          </RippleButton>
        </div>
      </motion.div>
    </motion.div>
  );
}

/*********************
 * Main App Component - ИСПРАВЛЕННАЯ ВЕРСИЯ
 *********************/
export default function App() {
  const [mode, setMode] = useState("login");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [showPwd, setShowPwd] = useState(false);
  const [pendingOtp, setPendingOtp] = useState(null);
  const [otp, setOtp] = useState("");
  const [loading, setLoading] = useState(false);
  const [user, setUser] = useState(null);
  const [otpVerified, setOtpVerified] = useState(false);
  const [devCode, setDevCode] = useState(null);
  const [needsEmailVerification, setNeedsEmailVerification] = useState(false);
  const [checkingAuth, setCheckingAuth] = useState(true);
  const { toasts, add } = useToasts();

  // Check URL for email verification action code
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const actionCode = urlParams.get('oobCode');
    
    if (actionCode) {
      handleEmailVerificationCallback(actionCode);
    }
  }, []);

  const handleEmailVerificationCallback = async (actionCode) => {
    try {
      setLoading(true);
      await verifyEmailActionCode(actionCode);
      add("Email успешно подтверждён!", "success");
      
      // Clean URL
      window.history.replaceState({}, document.title, window.location.pathname);
      
      // Reload user to get updated emailVerified status
      const auth = getAuthInstance();
      await auth.currentUser?.reload();
      setUser(auth.currentUser);
    } catch (error) {
      console.error('Email verification failed:', error);
      add("Ошибка подтверждения email", "error");
    } finally {
      setLoading(false);
    }
  };

  // Auth state listener
  useEffect(() => {
    let unsub = () => {};
    
    const setupAuth = async () => {
      try {
        const auth = getAuthInstance();
        unsub = onAuthStateChanged(auth, async (u) => {
          setUser(u);
          setCheckingAuth(false);
          
          if (u) {
            try {
              const userRef = doc(getDbInstance(), "users", u.uid);
              const snap = await getDoc(userRef);
              if (!snap.exists()) {
                await setDoc(userRef, {
                  email: u.email,
                  createdAt: serverTimestamp(),
                  providers: u.providerData?.map((p) => p.providerId) || [],
                  emailVerified: u.emailVerified,
                });
              } else if (!snap.data().email && u.email) {
                await updateDoc(userRef, { 
                  email: u.email,
                  emailVerified: u.emailVerified 
                });
              }
              
              if (u.email) {
                await setDoc(
                  doc(getDbInstance(), "users_email", u.uid), 
                  { 
                    email: u.email,
                    emailVerified: u.emailVerified 
                  }, 
                  { merge: true }
                );
              }

              // Check if user needs email verification
              if (!u.emailVerified && u.providerData?.some(p => p.providerId === 'password')) {
                setNeedsEmailVerification(true);
              } else {
                setNeedsEmailVerification(false);
              }
            } catch (error) {
              console.error("Error setting up user document:", error);
            }
          } else {
            setOtpVerified(false);
            setNeedsEmailVerification(false);
          }
        });
      } catch (e) {
        console.error('onAuthStateChanged setup failed', e);
        setCheckingAuth(false);
      }
    };

    setupAuth();

    return () => {
      try {
        unsub();
      } catch (e) {
        console.error("Error unsubscribing auth:", e);
      }
    };
  }, []);

  // Fancy background grid animation
  const Background = useMemo(
    () => (
      <div className="absolute inset-0 -z-10">
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_20%_20%,rgba(99,102,241,.25),transparent_40%),radial-gradient(circle_at_80%_20%,rgba(16,185,129,.25),transparent_40%),radial-gradient(circle_at_50%_80%,rgba(236,72,153,.25),transparent_40%)]" />
        <div className="absolute inset-0 opacity-30" style={{ maskImage: "linear-gradient(to bottom, transparent, black 20%, black 80%, transparent)" }}>
          <svg className="w-full h-full" preserveAspectRatio="none">
            {Array.from({ length: 30 }).map((_, i) => (
              <line key={"v" + i} x1={(i * 100) / 29 + "%"} y1="0" x2={(i * 100) / 29 + "%"} y2="100%" stroke="white" strokeOpacity="0.06" />
            ))}
            {Array.from({ length: 18 }).map((_, i) => (
              <line key={"h" + i} x1="0" y1={(i * 100) / 17 + "%"} x2="100%" y2={(i * 100) / 17 + "%"} stroke="white" strokeOpacity="0.06" />
            ))}
          </svg>
        </div>
      </div>
    ),
    []
  );

  const disabled = loading;

  // ИСПРАВЛЕННЫЕ ОБРАБОТЧИКИ ВВОДА
  const handleEmailChange = (value) => {
    setEmail(value);
  };

  const handlePasswordChange = (value) => {
    setPassword(value);
  };

  const handleAuth = async (action) => {
    try {
      setLoading(true);
      setDevCode(null);
      
      if (!emailRegex.test(email)) throw new Error("Введите корректный email");
      if (password.length < 6) throw new Error("Минимальная длина пароля — 6 символов");

      const auth = getAuthInstance();

      if (action === "login") {
        const res = await signInWithEmailAndPassword(auth, email, password);
        
        // Check if email is verified for password providers
        if (!res.user.emailVerified && res.user.providerData?.some(p => p.providerId === 'password')) {
          setNeedsEmailVerification(true);
          add("Подтвердите ваш email для полного доступа", "error");
          return;
        }
        
        const dev = await sendEmailOtp(email, "вход");
        setPendingOtp({ email, user: res.user, reason: "вход" });
        setDevCode(dev);
        add("Мы отправили код на ваш email.");
      } else {
        const res = await createUserWithEmailAndPassword(auth, email, password);
        
        // Send email verification
        await handleEmailVerification(res.user);
        
        await setDoc(doc(getDbInstance(), "users", res.user.uid), {
          email: email,
          createdAt: serverTimestamp(),
          providers: ["password"],
          emailVerified: false,
        });
        await setDoc(doc(getDbInstance(), "users_email", res.user.uid), { 
          email,
          emailVerified: false 
        }, { merge: true });
        
        setNeedsEmailVerification(true);
        add("Письмо с подтверждением отправлено на вашу почту", "success");
      }
    } catch (e) {
      console.error(e);
      add(e.message || "Ошибка авторизации", "error");
    } finally {
      setLoading(false);
    }
  };

  const handleGoogle = async (scopes = []) => {
    try {
      setLoading(true);
      const provider = new GoogleAuthProvider();
      scopes.forEach((s) => provider.addScope(s));
      const auth = getAuthInstance();
      const res = await signInWithPopup(auth, provider);
      
      // Google accounts are automatically verified
      await setDoc(
        doc(getDbInstance(), "users", res.user.uid), 
        {
          email: res.user.email,
          createdAt: serverTimestamp(),
          providers: res.user.providerData?.map((p) => p.providerId) || [],
          emailVerified: true,
        }, 
        { merge: true }
      );
      
      await setDoc(
        doc(getDbInstance(), "users_email", res.user.uid), 
        { 
          email: res.user.email,
          emailVerified: true 
        }, 
        { merge: true }
      );
      
      const dev = await sendEmailOtp(res.user.email, scopes.length ? "Play Games вход" : "Google вход");
      setPendingOtp({ 
        email: res.user.email, 
        user: res.user, 
        reason: scopes.length ? "Play Games вход" : "Google вход" 
      });
      setDevCode(dev);
      add("Код отправлен на email аккаунта Google.");
    } catch (e) {
      console.error(e);
      add(e.message || "Не удалось войти через Google", "error");
    } finally {
      setLoading(false);
    }
  };

  const confirmOtp = async () => {
    try {
      if (!pendingOtp) return;
      if (otp.length !== 6) throw new Error("Введите 6-значный код");
      
      await verifyEmailOtp(pendingOtp.email, otp);
      await setDoc(
        doc(getDbInstance(), "users", pendingOtp.user.uid),
        { 
          twoFactorVerifiedAt: serverTimestamp(), 
          lastLoginAt: serverTimestamp() 
        },
        { merge: true }
      );
      
      setOtpVerified(true);
      add("Успешная авторизация", "success");
      setPendingOtp(null);
      setOtp("");
      setDevCode(null);
    } catch (e) {
      console.error(e);
      add(e.message || "Неверный код", "error");
    }
  };

  const handleResendVerification = async () => {
    try {
      setLoading(true);
      const auth = getAuthInstance();
      if (auth.currentUser) {
        await handleEmailVerification(auth.currentUser);
        add("Письмо с подтверждением отправлено повторно", "success");
      }
    } catch (error) {
      add("Ошибка при отправке письма", "error");
    } finally {
      setLoading(false);
    }
  };

  const AuthCard = () => {
    return (
      <div className="w-full max-w-xl mx-auto px-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, ease: "easeOut" }}
          layout
          className="rounded-3xl p-4 sm:p-6 md:p-8 border border-white/10 bg-white/10 backdrop-blur-xl shadow-2xl hover:shadow-3xl transition-all duration-500"
        >
          <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-6 sm:mb-8">
            <motion.div 
              className="flex items-center gap-3"
              initial={{ x: -20, opacity: 0 }}
              animate={{ x: 0, opacity: 1 }}
              transition={{ delay: 0.2, duration: 0.4 }}
            >
              <div className="w-10 h-10 sm:w-12 sm:h-12 rounded-2xl bg-gradient-to-br from-indigo-500 to-emerald-500 grid place-items-center text-white font-extrabold text-base sm:text-lg shadow-lg animate-pulse-glow">BR</div>
              <div>
                <div className="text-white font-black text-lg sm:text-xl tracking-wide">BR ONLINE</div>
                <div className="text-white/60 text-xs -mt-0.5">Мониторинг игровых серверов</div>
              </div>
            </motion.div>
            <motion.div 
              className="flex gap-1 sm:gap-2 bg-white/5 rounded-xl p-1 border border-white/10 w-full sm:w-auto"
              initial={{ x: 20, opacity: 0 }}
              animate={{ x: 0, opacity: 1 }}
              transition={{ delay: 0.2, duration: 0.4 }}
            >
              <button
                className={`flex-1 sm:flex-none px-3 sm:px-4 py-2 rounded-lg text-sm font-semibold flex items-center justify-center gap-2 transition-all duration-300 ${
                  mode === 'login' ? 'bg-white/20 text-white shadow-md scale-105' : 'text-white/70 hover:text-white hover:bg-white/10'
                }`}
                onClick={() => setMode("login")}
              >
                <LogIn className="w-4 h-4" /> <span className="hidden xs:inline">Вход</span>
              </button>
              <button
                className={`flex-1 sm:flex-none px-3 sm:px-4 py-2 rounded-lg text-sm font-semibold flex items-center justify-center gap-2 transition-all duration-300 ${
                  mode === 'register' ? 'bg-white/20 text-white shadow-md scale-105' : 'text-white/70 hover:text-white hover:bg-white/10'
                }`}
                onClick={() => setMode("register")}
              >
                <UserPlus className="w-4 h-4" /> <span className="hidden xs:inline">Регистрация</span>
              </button>
            </motion.div>
          </div>

          <AnimatePresence mode="wait">
            {mode === "login" ? (
              <motion.div
                key="login"
                initial={{ opacity: 0, x: 30 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -30 }}
                transition={{ duration: 0.3, ease: "easeInOut" }}
              >
                <form
                  onSubmit={(e) => {
                    e.preventDefault();
                    handleAuth("login");
                  }}
                  className="space-y-4"
                >
                  {/* ИСПРАВЛЕННЫЕ ПОЛЯ ВВОДА */}
                  <Field
                    icon={<Mail className="w-4 h-4" />}
                    label="Email"
                    type="email"
                    value={email}
                    onChange={handleEmailChange}
                    placeholder="you@example.com"
                    disabled={disabled}
                  />
                  <Field
                    icon={<Lock className="w-4 h-4" />}
                    label="Пароль"
                    type={showPwd ? 'text' : 'password'}
                    value={password}
                    onChange={handlePasswordChange}
                    placeholder="••••••••"
                    disabled={disabled}
                    rightIcon={
                      <button 
                        type="button" 
                        onClick={() => setShowPwd((s) => !s)} 
                        className="text-white/60 hover:text-white transition-colors duration-200"
                      >
                        {showPwd ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                      </button>
                    }
                  />

                  <RippleButton
                    type="submit"
                    disabled={disabled}
                    className="w-full mt-2 rounded-2xl bg-gradient-to-r from-indigo-500 to-emerald-500 text-white font-semibold py-3 shadow-lg border border-white/10 hover:shadow-xl transition-all duration-300"
                  >
                    {loading ? (
                      <span className="inline-flex items-center gap-2">
                        <Loader2 className="w-5 h-5 animate-spin" /> Входим…
                      </span>
                    ) : (
                      <span className="inline-flex items-center gap-2">
                        Войти <ChevronRight className="w-5 h-5" />
                      </span>
                    )}
                  </RippleButton>

                  <div className="relative py-4 text-center text-white/50 text-sm font-medium">
                    <span className="relative z-10 bg-gradient-to-r from-transparent via-black/20 to-transparent px-4">или</span>
                    <div className="absolute left-0 right-0 top-1/2 -translate-y-1/2 h-px bg-gradient-to-r from-transparent via-white/20 to-transparent" />
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                    <RippleButton
                      disabled={disabled}
                      onClick={() => handleGoogle([])}
                      className="rounded-2xl bg-white/5 hover:bg-white/10 text-white font-semibold py-3 border border-white/10 transition-all duration-300 hover:scale-105 hover:border-white/20"
                    >
                      <span className="inline-flex items-center gap-2 justify-center">
                        <UserCircle2 className="w-5 h-5" /> <span className="text-xs sm:text-sm">Google</span>
                      </span>
                    </RippleButton>

                    <RippleButton
                      disabled={disabled}
                      onClick={() => handleGoogle(["https://www.googleapis.com/auth/games"])}
                      className="rounded-2xl bg-white/5 hover:bg-white/10 text-white font-semibold py-3 border border-white/10 transition-all duration-300 hover:scale-105 hover:border-white/20"
                    >
                      <span className="inline-flex items-center gap-2 justify-center">
                        <Gamepad2 className="w-5 h-5" /> <span className="text-xs sm:text-sm">Play Games</span>
                      </span>
                    </RippleButton>
                  </div>
                </form>
              </motion.div>
            ) : (
              <motion.div
                key="register"
                initial={{ opacity: 0, x: -30 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 30 }}
                transition={{ duration: 0.3, ease: "easeInOut" }}
              >
                <form
                  onSubmit={(e) => {
                    e.preventDefault();
                    handleAuth("register");
                  }}
                  className="space-y-4"
                >
                  {/* ИСПРАВЛЕННЫЕ ПОЛЯ ВВОДА */}
                  <Field
                    icon={<Mail className="w-4 h-4" />}
                    label="Email"
                    type="email"
                    value={email}
                    onChange={handleEmailChange}
                    placeholder="you@example.com"
                    disabled={disabled}
                  />
                  <Field
                    icon={<Lock className="w-4 h-4" />}
                    label="Пароль"
                    type={showPwd ? 'text' : 'password'}
                    value={password}
                    onChange={handlePasswordChange}
                    placeholder="минимум 6 символов"
                    disabled={disabled}
                    rightIcon={
                      <button 
                        type="button" 
                        onClick={() => setShowPwd((s) => !s)} 
                        className="text-white/60 hover:text-white transition-colors duration-200"
                      >
                        {showPwd ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                      </button>
                    }
                  />

                  <RippleButton
                    type="submit"
                    disabled={disabled}
                    className="w-full mt-2 rounded-2xl bg-gradient-to-r from-indigo-500 to-emerald-500 text-white font-semibold py-3 shadow-lg border border-white/10 hover:shadow-xl transition-all duration-300"
                  >
                    {loading ? (
                      <span className="inline-flex items-center gap-2">
                        <Loader2 className="w-5 h-5 animate-spin" /> Создаём…
                      </span>
                    ) : (
                      <span className="inline-flex items-center gap-2">
                        Зарегистрироваться <ChevronRight className="w-5 h-5" />
                      </span>
                    )}
                  </RippleButton>
                </form>
              </motion.div>
            )}
          </AnimatePresence>

        </motion.div>
      </div>
    );
  };

  const OtpCard = () => {
    return (
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.4, ease: "easeOut" }}
        layout
        className="w-full max-w-xl mx-auto px-4 rounded-3xl p-4 sm:p-6 md:p-8 border border-white/10 bg-white/10 backdrop-blur-xl shadow-2xl"
      >
        <motion.div 
          className="flex items-center gap-3 sm:gap-4 mb-6 sm:mb-8"
          initial={{ y: -10, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.1, duration: 0.3 }}
        >
          <div className="w-10 h-10 sm:w-12 sm:h-12 rounded-2xl bg-gradient-to-br from-indigo-500 to-emerald-500 grid place-items-center">
            <ShieldCheck className="w-5 h-5 sm:w-6 sm:h-6 text-white" />
          </div>
          <div>
            <div className="text-white font-black text-lg sm:text-xl">Подтверждение входа</div>
            <div className="text-white/70 text-xs sm:text-sm break-all">
              Проверьте почту <span className="font-semibold text-white/90">{pendingOtp?.email}</span>
            </div>
          </div>
        </motion.div>

        <div className="space-y-6">
          <motion.div
            initial={{ y: 10, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.2, duration: 0.3 }}
          >
            <OtpInput value={otp} onChange={(e) => setOtp(e.target.value)} length={6} disabled={loading} />
          </motion.div>

          {devCode && (
            <motion.div 
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ duration: 0.3 }}
              className="text-center text-sm text-emerald-200/90 bg-emerald-500/10 border border-emerald-500/20 rounded-xl py-3 px-4 flex items-center justify-center gap-2"
            >
              <Send className="w-4 h-4" /> 
              <span className="text-xs sm:text-sm">Письмо не отправлено. Код: <b className="tracking-widest ml-1 sm:ml-2 text-emerald-100">{devCode}</b></span>
            </motion.div>
          )}

          <motion.div 
            className="grid grid-cols-1 sm:grid-cols-2 gap-3"
            initial={{ y: 10, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.3, duration: 0.3 }}
          >
            <RippleButton
              disabled={loading}
              onClick={confirmOtp}
              className="rounded-2xl bg-gradient-to-r from-indigo-500 to-emerald-500 text-white font-semibold py-3 border border-white/10 hover:shadow-lg transition-all duration-300"
            >
              {loading ? (
                <span className="inline-flex items-center gap-2">
                  <Loader2 className="w-5 h-5 animate-spin" /> Проверяем…
                </span>
              ) : (
                <span className="inline-flex items-center gap-2">
                  Подтвердить <CheckCircle2 className="w-5 h-5" />
                </span>
              )}
            </RippleButton>
            <RippleButton
              disabled={loading}
              onClick={async () => {
                const dev = await sendEmailOtp(pendingOtp.email, pendingOtp.reason);
                setDevCode(dev);
                add("Код повторно отправлен");
              }}
              className="rounded-2xl bg-white/5 hover:bg-white/10 text-white font-semibold py-3 border border-white/10 transition-all duration-300"
            >
              <span className="text-sm">Отправить код ещё раз</span>
            </RippleButton>
          </motion.div>

          <button
            onClick={async () => {
              await signOut(getAuthInstance());
              setPendingOtp(null);
              setOtp("");
              setDevCode(null);
            }}
            className="text-white/60 hover:text-white text-xs underline mt-4 block mx-auto transition-colors duration-200"
          >
            Отменить и вернуться
          </button>
        </div>
      </motion.div>
    );
  };

  const Dashboard = () => {
    const [now] = useState(() => new Date());
    const uptime = 99.97;
    const avgLatency = 32 + Math.round(Math.random() * 8);
    const online = 128 + Math.round(Math.random() * 42);

    return (
      <div className="max-w-6xl mx-auto px-4">
        <motion.div 
          className="flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-6"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <div className="flex items-center gap-3">
            <motion.div 
              className="w-10 h-10 sm:w-11 sm:h-11 rounded-2xl bg-gradient-to-br from-indigo-500 to-emerald-500 grid place-items-center text-white font-extrabold text-sm sm:text-base"
              whileHover={{ scale: 1.1, rotate: 5 }}
              transition={{ duration: 0.2 }}
            >
              BR
            </motion.div>
            <div>
              <div className="text-white font-black text-xl sm:text-2xl tracking-wide">BR ONLINE — Панель</div>
              <div className="text-white/60 text-xs -mt-0.5">{now.toLocaleString()}</div>
            </div>
          </div>
          <motion.div 
            className="flex items-center gap-3"
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.2, duration: 0.5 }}
          >
            <div className="text-white/80 text-sm truncate max-w-[150px] sm:max-w-none">{user?.email}</div>
            <RippleButton
              onClick={async () => {
                await signOut(getAuthInstance());
                setOtpVerified(false);
                setNeedsEmailVerification(false);
              }}
              className="rounded-xl bg-white/5 hover:bg-white/10 text-white font-semibold px-3 sm:px-4 py-2 border border-white/10 transition-all duration-200"
            >
              <LogOut className="w-4 h-4" />
            </RippleButton>
          </motion.div>
        </motion.div>

        <motion.div 
          className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3, duration: 0.5 }}
        >
          <StatCard title="Аптайм" value={`${uptime}%`} sub="за 30 дней" />
          <StatCard title="Игроков онлайн" value={online} sub="всего по кластерам" />
          <StatCard title="Средняя задержка" value={`${avgLatency} ms`} sub="Европа / HEL" />
        </motion.div>

        <motion.div 
          className="rounded-2xl p-4 sm:p-5 mt-4 sm:mt-6 bg-white/5 border border-white/10 backdrop-blur"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4, duration: 0.5 }}
        >
          <div className="flex items-center gap-2 mb-3 sm:mb-4 text-white/90 font-semibold text-sm sm:text-base">
            <Gamepad2 className="w-4 h-4 sm:w-5 sm:h-5" /> Онлайн по времени суток
          </div>
          <div className="w-full h-48 sm:h-64">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={demoSeries} margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>
                <CartesianGrid strokeDasharray="3 3" strokeOpacity={0.1} />
                <XAxis dataKey="time" stroke="currentColor" opacity={0.6} fontSize={12} />
                <YAxis stroke="currentColor" opacity={0.6} fontSize={12} />
                <Tooltip 
                  contentStyle={{ 
                    background: "rgba(0,0,0,.6)", 
                    border: "1px solid rgba(255,255,255,.15)", 
                    borderRadius: 12, 
                    color: "white",
                    fontSize: '12px'
                  }} 
                />
                <Line 
                  type="monotone" 
                  dataKey="players" 
                  strokeWidth={3} 
                  dot={false}
                  stroke="url(#colorUv)"
                />
                <defs>
                  <linearGradient id="colorUv" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#8884d8" stopOpacity={0.8}/>
                    <stop offset="95%" stopColor="#8884d8" stopOpacity={0}/>
                  </linearGradient>
                </defs>
              </LineChart>
            </ResponsiveContainer>
          </div>
        </motion.div>

        <motion.div 
          className="mt-4 sm:mt-6 grid lg:grid-cols-2 gap-3 sm:gap-4"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5, duration: 0.5 }}
        >
          <div className="rounded-2xl p-4 sm:p-5 bg-white/5 border border-white/10 backdrop-blur">
            <div className="text-white/90 font-semibold mb-3 text-sm sm:text-base">Сервера</div>
            <div className="grid grid-cols-2 gap-2 sm:gap-3">
              {["EU-1", "EU-2", "US-1", "AS-1"].map((name, i) => (
                <motion.div 
                  key={name} 
                  className="rounded-xl p-3 sm:p-4 bg-white/5 border border-white/10"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  transition={{ duration: 0.2 }}
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 0.6 + i * 0.1 }}
                >
                  <div className="text-sm text-white/70">{name}</div>
                  <div className="mt-1 text-lg sm:text-xl font-bold text-white">
                    {60 + Math.round(Math.random() * 40)} игроков
                  </div>
                  <div className="text-xs text-white/60">
                    Пинг: {20 + Math.round(Math.random() * 40)} ms
                  </div>
                </motion.div>
              ))}
            </div>
          </div>
          <div className="rounded-2xl p-4 sm:p-5 bg-white/5 border border-white/10 backdrop-blur">
            <div className="text-white/90 font-semibold mb-3 text-sm sm:text-base">Последние события</div>
            <ul className="space-y-2 text-sm">
              {[
                "EU-2 перезапуск по расписанию",
                "Анти-чит обновлён",
                "Новая карта добавлена на AS-1",
                "US-1: пик игроков +12%",
              ].map((t, i) => (
                <motion.li 
                  key={i} 
                  className="rounded-xl px-3 py-2 bg-white/5 border border-white/10 text-white/80 text-xs sm:text-sm"
                  initial={{ opacity: 0, x: -10 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.7 + i * 0.1 }}
                >
                  {t}
                </motion.li>
              ))}
            </ul>
          </div>
        </motion.div>
      </div>
    );
  };

  // Loading state
  if (checkingAuth) {
    return (
      <div className="min-h-screen relative text-white overflow-x-hidden flex items-center justify-center">
        {Background}
        <div className="absolute inset-0 bg-[linear-gradient(to_bottom_right,rgba(0,0,0,.65),rgba(0,0,0,.75))]" />
        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.5 }}
          className="text-center"
        >
          <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-indigo-500 to-emerald-500 grid place-items-center text-white font-extrabold text-lg mx-auto mb-4 animate-pulse">
            BR
          </div>
          <div className="text-white/80">Загрузка...</div>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="min-h-screen relative text-white overflow-x-hidden">
      <style>{`
        @keyframes ripple { 
          from { 
            transform: scale(0); 
            opacity: .7; 
          } 
          to { 
            transform: scale(3); 
            opacity: 0; 
          } 
        }
      `}</style>
      {Background}
      <div className="absolute inset-0 bg-[linear-gradient(to_bottom_right,rgba(0,0,0,.65),rgba(0,0,0,.75))]" />

      <div className="relative px-2 py-6 sm:py-10 md:py-16">
        {!user && !pendingOtp && !needsEmailVerification && (
          <motion.h1 
            initial={{ opacity: 0, y: -6 }} 
            animate={{ opacity: 1, y: 0 }} 
            transition={{ duration: 0.5, ease: "easeOut" }}
            className="text-center text-2xl sm:text-4xl md:text-5xl font-black tracking-tight text-white mb-6 sm:mb-8 px-2"
          >
            Добро пожаловать в{" "}
            <span className="bg-gradient-to-r from-indigo-400 to-emerald-300 bg-clip-text text-transparent">
              BR ONLINE
            </span>
          </motion.h1>
        )}

        <div className="max-w-7xl mx-auto">
          {!user && !pendingOtp && !needsEmailVerification && <AuthCard />}
          {pendingOtp && !otpVerified && <OtpCard />}
          {needsEmailVerification && (
            <EmailVerificationCard 
              email={user?.email || email}
              onResend={handleResendVerification}
              onCancel={async () => {
                await signOut(getAuthInstance());
                setNeedsEmailVerification(false);
              }}
              loading={loading}
            />
          )}
          {user && otpVerified && !needsEmailVerification && <Dashboard />}
        </div>
      </div>

      <Toasts items={toasts} />
    </div>
  );
}

/*********************
 * DEV helper: run `testFirebase()` from console to validate initialization.
 *********************/
export async function testFirebase() {
  try {
    const a = getAuthInstance();
    const d = getDbInstance();
    console.log('Firebase initialized', { 
      apps: getApps().length, 
      auth: !!a, 
      db: !!d 
    });
    return true;
  } catch (e) {
    console.error('Firebase test failed', e);
    return false;
  }
}